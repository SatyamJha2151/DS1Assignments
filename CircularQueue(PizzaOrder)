#include<stdio.h>
#include<stdlib.h>
#define max 5
int rear =-1, front = -1;
struct pizza{
    char name[20], address[30];
    int id, quantity;
}pizza[max];
int id = 1;
int isEmpty();
int isFull();
void insert();
void delete();
void display();
void peek();
int main()
{
    int choice;
    while(1) {
        printf("1.Place is order\n2.Dispatch order\n3.Display Next item to be dispatched.\n4.Display order all left orders\n5. Exit\n");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                insert();
                break;
            case 2:
                delete();
                break;
            case 3:
                peek();
                break;
            case 4:
                display();
                break;
            case 5:
                exit(1);
            default:
                printf("\nEnter Correct choice:\n");

        }
    }
}
void insert()
{
    if(isFull()) {
        printf("Order is overflowed");
        return;
    }
    if(front ==-1)
        front =0;
    if(rear == max-1)
        rear = 0;
    else
        rear++;
    pizza[rear].id = id++;
    printf("\nEnter Name:\n");
    scanf("%s",&pizza[rear].name);
    printf("\nEnter address:\n");
    scanf("%s",&pizza[rear].address);
    printf("\nEnter Quantity:\n");
    scanf("%d", &pizza[rear].quantity);
}
void delete()
{
    if(isEmpty()) {
        printf("No order is available to dispatch");
        return;
    }
    printf("Order number %d is dispatched to %s", pizza[front].id, pizza[front].name);
    if(front == rear)
    {
        front =-1;
        rear =-1;
    }
    else if(front == max-1)
        front =0;
    else
        front++;
}
void peek()
{
    if(isEmpty())
    {
        printf("\nNo order is available to dispatch\n");
        return;
    }
    else
    {
        printf("\nOrder Id: %d\n", pizza[front].id);
        printf("Customer's Name:%s\n", pizza[front].name);
        printf("Customer's address: %s\n", pizza[front].address);
        printf("Pizza Quantity:%d\n\n", pizza[front].quantity);
    }
}
void display()
{
    if(isEmpty()) {
        printf("Order list is empty to display.");
        return;
    }
    int i = front;
    if(rear>= front)
    {
        while (i<=rear)
        {
            printf("\nOrder Id: %d\n", pizza[i].id);
            printf("Customer's Name:%s\n", pizza[i].name);
            printf("Customer's address: %s\n", pizza[i].address);
            printf("Pizza Quantity:%d\n\n", pizza[i].quantity);
            i++;
        }
    }
    else
    {
        while (i<=max-1)
        {
            printf("\nOrder Id: %d\n", pizza[i].id);
            printf("Customer's Name:%s\n", pizza[i].name);
            printf("Customer's address: %s\n", pizza[i].address);
            printf("Pizza Quantity:%d\n\n", pizza[i].quantity);
            i++;
        }
        i=0;
        while (i<=rear)
        {
            printf("\nOrder Id: %d\n", pizza[i].id);
            printf("Customer's Name:%s\n", pizza[i].name);
            printf("Customer's address: %s\n", pizza[i].address);
            printf("Pizza Quantity:%d\n\n", pizza[i].quantity);
            i++;
        }

    }
}
int isEmpty()
{
    if(front==-1)
        return 1;
    else
        return 0;
}
int isFull()
{
    if(front==0 && rear==max-1 || front == rear+1)
        return 1;
    else
        return 0;
}
