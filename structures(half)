#include <stdio.h>
#include<stdlib.h>
struct student{
    char name[20];
    int RollNo, marks;
};
typedef struct student student;
void GetData( student s[10], int n)
{
    int i;
    for(i=0;i<n;i++)
    {
        printf("Roll no of student is :\n");
        scanf("%d", &s[i].RollNo);
        printf("Name of the Student is :\n");
        scanf("%s", s[i].name);
        printf("Total Marks: \n");
        scanf("%d", &s[i].marks);
    }
}
void display(student s[], int n)
{
    int i;
    for(i=0;i<n;i++)
    {
        printf("Roll number :%d\tName :  %s\tTotal Marks : %d", s[i].RollNo, s[i].name,s[i].marks);
        printf("\n");
    }
}
int BinarySearch(student s[], int n, int k)
{
    int mid, low, up;
    low =0;
    up = n-1;
    while(low<=up)
    {
        mid =(low+up)/2;
        if(s[mid].RollNo==k)
            return mid;
        else if(k<s[mid].RollNo)
            up = mid-1;
        else if(k>s[mid].RollNo)
            low = mid+1;
    }
}
void Selection_sort(student s[], int n)
{
    int i, j, m;
    student swap;
    for(i=0;i<n-1;i++)
    {
        m=i;
        for(j=i+1;j<n;j++) {
            if (s[j].RollNo < s[i].RollNo) {
                swap = s[i];
                s[i] = s[m];
                s[m] = swap;
            }
        }
        printf("Data after %d itiration\n", i);
        display(s, n);
    }
    printf("After sorting\n");
    display(s, n);
}
int main() {
    int n, choice, item;
    printf("Enter the number of students\n");
    scanf(" %d", &n);
    student *s = malloc(n* sizeof(student));
    while(1)
    {
        printf("Enter the choice\n1. Create a Data base\n2. Display Database\n3. Binary search\n4. Selection Sort\n5.Exit\n");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                GetData(s, n);
                break;
            case 2:
                display(s, n);
                break;
            case 3:
                printf("Enter the element to be searched\n");
                scanf("%d", &item);
                BinarySearch(s, n, item);
                break;
            case 4:
                Selection_sort(s, n);
                break;
            case 5:
                exit(1);
            default:
                printf("Invalid!, Enter valid choice.\n");

        }
    }
}
